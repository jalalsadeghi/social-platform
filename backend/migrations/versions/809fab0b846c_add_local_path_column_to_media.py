"""Add local_path column to media

Revision ID: 809fab0b846c
Revises: 
Create Date: 2025-05-23 17:19:07.377128

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '809fab0b846c'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('ai_prompts')
    op.drop_table('roles')
    op.drop_table('ai_contents')
    op.drop_index('ix_users_email', table_name='users')
    op.drop_index('ix_users_username', table_name='users')
    op.drop_table('users')
    op.drop_table('media')
    op.drop_index('ix_subscriptions_end_date', table_name='subscriptions')
    op.drop_index('ix_subscriptions_plan_id', table_name='subscriptions')
    op.drop_index('ix_subscriptions_status', table_name='subscriptions')
    op.drop_index('ix_subscriptions_user_id', table_name='subscriptions')
    op.drop_table('subscriptions')
    op.drop_index('ix_social_accounts_platform', table_name='social_accounts')
    op.drop_index('ix_social_accounts_user_id', table_name='social_accounts')
    op.drop_table('social_accounts')
    op.drop_index('ix_product_status', table_name='product')
    op.drop_index('ix_product_user_id', table_name='product')
    op.drop_table('product')
    op.drop_index('ix_plans_name', table_name='plans')
    op.drop_table('plans')
    op.drop_table('instagram_stats')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('instagram_stats',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('product_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('views', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('likes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('comments', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_checked_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], name='instagram_stats_product_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='instagram_stats_pkey'),
    sa.UniqueConstraint('product_id', name='instagram_stats_product_id_key')
    )
    op.create_table('plans',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('features', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='plans_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_plans_name', 'plans', ['name'], unique=True)
    op.create_table('product',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('product_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ai_content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('pending', 'processing', 'ready', 'posted', 'failed', name='queuestatus'), autoincrement=False, nullable=True),
    sa.Column('priority', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('scheduled_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='product_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='product_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_product_user_id', 'product', ['user_id'], unique=False)
    op.create_index('ix_product_status', 'product', ['status'], unique=False)
    op.create_table('social_accounts',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('platform', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('account_identifier', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('credentials', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('cookies', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_oauth', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='social_accounts_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='social_accounts_pkey')
    )
    op.create_index('ix_social_accounts_user_id', 'social_accounts', ['user_id'], unique=False)
    op.create_index('ix_social_accounts_platform', 'social_accounts', ['platform'], unique=False)
    op.create_table('subscriptions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('plan_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('start_date', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('end_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('active', 'expired', 'cancelled', name='subscriptionstatus'), autoincrement=False, nullable=True),
    sa.Column('payment_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['plan_id'], ['plans.id'], name='subscriptions_plan_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='subscriptions_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='subscriptions_pkey')
    )
    op.create_index('ix_subscriptions_user_id', 'subscriptions', ['user_id'], unique=False)
    op.create_index('ix_subscriptions_status', 'subscriptions', ['status'], unique=False)
    op.create_index('ix_subscriptions_plan_id', 'subscriptions', ['plan_id'], unique=False)
    op.create_index('ix_subscriptions_end_date', 'subscriptions', ['end_date'], unique=False)
    op.create_table('media',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('product_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('media_url', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('media_type', postgresql.ENUM('image', 'video', name='media_type_enum'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], name='media_product_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='media_pkey')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('full_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('profile_picture', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('role_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('plan_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['plan_id'], ['plans.id'], name='users_plan_id_fkey'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name='users_role_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_users_username', 'users', ['username'], unique=True)
    op.create_index('ix_users_email', 'users', ['email'], unique=True)
    op.create_table('ai_contents',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('product_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('prompt_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('content_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('evaluation_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], name='ai_contents_product_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['prompt_id'], ['ai_prompts.id'], name='ai_contents_prompt_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='ai_contents_pkey')
    )
    op.create_table('roles',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('permissions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='roles_pkey'),
    sa.UniqueConstraint('name', name='roles_name_key')
    )
    op.create_table('ai_prompts',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('prompt_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('prompt_content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('prompt_type', postgresql.ENUM('content_generation', 'comment_response', name='prompttype'), autoincrement=False, nullable=False),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='ai_prompts_pkey'),
    sa.UniqueConstraint('prompt_name', name='ai_prompts_prompt_name_key')
    )
    # ### end Alembic commands ###
